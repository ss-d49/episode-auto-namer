#!/usr/bin/env python3
"""This script imports data into a database from tvdb."""

import argparse

from pytvdbapi import api
from sqlalchemy import (Column, Date, ForeignKey, Integer, MetaData, Text,
                        create_engine)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship, sessionmaker

base = declarative_base()


class Title(base):
    """Title Table Definition"""
    __tablename__ = 'title'
    titleId = Column(Integer, primary_key=True, nullable=False)
    titleIMDBId = Column(Integer)
    title = Column(Text, unique=True, nullable=False)
    originalTitle = Column(Text, unique=True)
    episodes = relationship("Episode")
    titleSynopsis = Column(Text)
    titleOriginalSynopsis = Column(Text)
    network = Column(Text)


class Episode(base):
    """Episode Table Definition"""
    __tablename__ = 'episode'
    titleId = Column(Integer, ForeignKey('title.titleId'), nullable=False)
    episodeId = Column(Integer, primary_key=True, nullable=False)
    episodeIMDBId = Column(Integer)
    seasonNumber = Column(Integer)
    episodeNumber = Column(Integer)
    episodeTitle = Column(Text, nullable=False)
    episodeOriginalTitle = Column(Text, unique=True)
    episodeSynopsis = Column(Text)
    episodeOriginalSynopsis = Column(Text)
    episodeAired = Column(Date)


engine = create_engine(
    "mariadb+pymysql://root:root@localhost:3306/media2")
metadata = MetaData(engine)
Session = sessionmaker()
Session.configure(bind=engine)
session = Session()
base.metadata.create_all(engine)

parser = argparse.ArgumentParser(
    description="Usage: get.py \"name of series\"")
parser.add_argument("series", help="name of the series")
parser.add_argument("table", help="name of table in database for the series")
parser.add_argument("language")
args = parser.parse_args()

series = args.series
table = args.table
language = args.language

db = api.TVDB("B43FF87DE395DF56")
result = db.search(f"{series}", language)
show = result[0]
show.update()
print(show.lang)

if language == "en":
    session.merge(Title(
        titleId=show.id,
        titleIMDBId=show.IMDB_ID[2:] or None,
        title=show.SeriesName,
        titleSynopsis=show.Overview,
        network=show.Network)
    )
else:
    session.merge(Title(
        titleId=show.id,
        originalTitle=show.SeriesName,
        titleOriginalSynopsis=show.Overview)
    )

for season in show:
    for episode in season:
        if episode.EpisodeName != "":
            if language == "en":
                session.merge(Episode(
                    titleId=show.id,
                    episodeId=episode.id,
                    episodeIMDBId=episode.IMDB_ID[2:] or None,
                    seasonNumber=season.season_number,
                    episodeNumber=episode.EpisodeNumber,
                    episodeTitle=episode.EpisodeName,
                    episodeAired=episode.FirstAired or None,
                    episodeSynopsis=episode.Overview)
                )
            else:
                session.merge(Episode(
                    episodeId=episode.id,
                    episodeOriginalTitle=episode.EpisodeName,
                    episodeOriginalSynopsis=episode.Overview)
                )

session.commit()
