#!/usr/bin/env python3
"""This script renames all files in the current directory to match the data in a database created from TVDB data."""

import argparse
import re
from pathlib import Path
from pytvdbapi import api
from sqlalchemy import (Column, Date, ForeignKey, Integer, MetaData, Text,
                        create_engine)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship, sessionmaker

base = declarative_base()


class Title(base):
    """Title Table Definition"""
    __tablename__ = 'title'
    titleId = Column(Integer, primary_key=True, nullable=False)
    titleIMDBId = Column(Integer)
    title = Column(Text, unique=True, nullable=False)
    originalTitle = Column(Text, unique=True)
    episodes = relationship("Episode")
    titleSynopsis = Column(Text)
    titleOriginalSynopsis = Column(Text)
    network = Column(Text)


class Episode(base):
    """Episode Table Definition"""
    __tablename__ = 'episode'
    titleId = Column(Integer, ForeignKey('title.titleId'), nullable=False)
    episodeId = Column(Integer, primary_key=True, nullable=False)
    episodeIMDBId = Column(Integer)
    seasonNumber = Column(Integer)
    episodeNumber = Column(Integer)
    episodeTitle = Column(Text, nullable=False)
    episodeOriginalTitle = Column(Text, unique=True)
    episodeSynopsis = Column(Text)
    episodeOriginalSynopsis = Column(Text)
    episodeAired = Column(Date)


engine = create_engine(
    "mariadb+pymysql://root:root@localhost:3306/media2")
metadata = MetaData(engine)
Session = sessionmaker()
Session.configure(bind=engine)
session = Session()
base.metadata.create_all(engine)


parser = argparse.ArgumentParser("Usage: epNamer.py ")
parser.add_argument("series", help="name of the series")
parser.add_argument("table", help="name of table in database for the series")
args = parser.parse_args()

table = args.table
series = args.series

def containsTitle(title,filename):
	words = title.split(' ')
	count = 0
	regex = r".*"
	for word in words:
		regex += word.strip(':|-|_| ') + '.*'
	regex += '$'
	matches = re.search(regex, filename)
	if matches:
		return True
	else:
		return False

eps = session.query(Title).filter(Title.title.ilike(f"%{table}%")).first().episodes

for file in Path('.').glob('*.*'):
	for e in eps:
		if e.seasonNumber != None:
			if f"S{e.seasonNumber:02}E{e.episodeNumber:02}" in file.name:
				newname = f"{series} - S{e.seasonNumber:02}E{e.episodeNumber:02} - {e.episodeTitle.replace('?','').replace('/','-').replace(':',' -')}{file.suffix}"
				print(newname)
				file.rename(newname)
				break
